[build-system]
requires = ["setuptools>=41", "wheel", "setuptools-git-versioning<2"]
build-backend = "setuptools.build_meta"

[tool.setuptools-git-versioning]
enabled = true

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
profile = "black"
skip_gitignore = true
float_to_top = true
default_section = "THIRDPARTY"
known_first_party = "graphblas"
line_length = 100

[tool.pytest.ini_options]
testpaths = "graphblas/tests"
xfail_strict = true
markers = [
    "slow: Skipped unless --runslow passed",
]

[tool.coverage.run]
branch = true
source = ["graphblas"]
omit = [
    "graphblas/_version.py",
    "graphblas/viz.py",  # TODO: test and get coverage for viz.py
]

[tool.coverage.report]
ignore_errors = false
precision = 1
fail_under = 0
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.codespell]
ignore-words-list = "coo,ba"

[tool.ruff]
# https://github.com/charliermarsh/ruff/
line-length = 100
target-version = "py38"
select = [
    # Have we enabled too many checks that they'll become a nuisance? We'll see...
    "F",  # pyflakes
    "E",  # pycodestyle Error
    "W",  # pycodestyle Warning
    # "C90",  # mccabe
    # "I",  # isort
    # "D",  # pydocstyle
    "UP",  # pyupgrade
    # "N",  # pep8-naming
    "YTT",  # flake8-2020
    # "ANN",  # flake8-annotations
    "S",  # bandit
    # "BLE",  # flake8-blind-except
    # "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    # "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    # "ICN",  # flake8-import-conventions
    "T20",   # flake8-print
    # "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    # "RET",  # flake8-return
    "SIM",  # flake8-simplify
    # "TID",  # flake8-tidy-imports
    # "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    # "ERA",  # eradicate
    # "PD",  # pandas-vet
    "PGH",  # pygrep-hooks
    "PLC",  # pylint Convention
    "PLE",  # pylint Error
    "PLR",  # pylint Refactor
    "PLW",  # pylint Warning
    "PIE",  # flake8-pie
    "RUF",  # ruff-specific rules
]
ignore = [
    "D203",  # 1 blank line required before class docstring (Note: conflicts with D211, which is preferred)
    "SIM105",  # Use contextlib.suppress(...) instead of try-except-pass (Note: try-except-pass is much faster)
]
[tool.ruff.per-file-ignores]
"graphblas/core/operator.py" = ["S102"]
"graphblas/tests/*py" = ["S101", "T201"]
"graphblas/tests/test_dtype.py" = ["UP003"]
"graphblas/tests/test_formatting.py" = ["E501"]
"scripts/create_pickle.py" = ["F403", "F405"]

[tool.pylint.messages_control]
# To run a single check, do: pylint graphblas --disable E,W,R,C,I --enable assignment-from-no-return
max-line-length = 100
py-version = "3.8"
enable = ["I"]
disable = [
    # Error
    "assignment-from-no-return",

    # Warning
    "arguments-differ",
    "arguments-out-of-order",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "non-parent-init-called",
    "redefined-builtin",
    "redefined-outer-name",
    "super-init-not-called",
    "unbalanced-tuple-unpacking",
    "unnecessary-lambda",
    "unspecified-encoding",
    "unused-argument",
    "unused-variable",

    # Refactor
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "too-few-public-methods",

    # Convention
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-many-lines",

    # Intentionally turned off
    # error
    "class-variable-slots-conflict",
    "invalid-unary-operand-type",
    "no-member",
    "no-name-in-module",
    "not-an-iterable",
    "too-many-function-args",
    "unexpected-keyword-arg",
    # warning
    "broad-except",
    "pointless-statement",
    "protected-access",
    "undefined-loop-variable",
    "unused-import",
    # refactor
    "comparison-with-itself",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    # convention
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "singleton-comparison",
    "single-string-used-for-slots",
    "unidiomatic-typecheck",
    "unnecessary-dunder-call",
    "wrong-import-order",
    "wrong-import-position",
    # informative
    "locally-disabled",
    "suppressed-message",
]
