[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools >=61",
    "setuptools-git-versioning",
]

[project]
name = "python-graphblas"
dynamic = ["version"]
description = "Python library for GraphBLAS: high-performance sparse linear algebra for scalable graph analytics"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Erik Welch"},
    {name = "Jim Kitchen"},
]
maintainers = [
    {name = "Erik Welch", email = "erik.n.welch@gmail.com"},
    {name = "Jim Kitchen", email = "jim22k@gmail.com"},
]
keywords = [
    "graphblas",
    "graph",
    "sparse",
    "matrix",
    "lagraph",
    "suitesparse",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "suitesparse-graphblas >=7.4.0.0, <7.5",
    "numpy >=1.21",
    "numba >=0.55",
    "donfig >=0.6",
    "pyyaml >=5.4",
]

[project.urls]
homepage = "https://github.com/python-graphblas/python-graphblas"
documentation = "https://python-graphblas.readthedocs.io"
repository = "https://github.com/python-graphblas/python-graphblas"
changelog = "https://github.com/python-graphblas/python-graphblas/releases"

[project.optional-dependencies]
repr = [
    "pandas >=1.2",
]
io = [
    "networkx >=2.8",
    "scipy >=1.8",
    "awkward >=1.9",
    "sparse >=0.12",
]
viz = [
    "matplotlib >=3.5",
]
test = [
    "pytest",
    "pandas >=1.2",
    "scipy >=1.8",
]
complete = [
    "pandas >=1.2",
    "networkx >=2.8",
    "scipy >=1.8",
    "awkward >=1.9",
    "sparse >=0.12",
    "matplotlib >=3.5",
    "pytest",
]

[tool.setuptools]
# Let's be explicit
# $ python -c 'from setuptools import find_packages ; [print(x) for x in sorted(find_packages())]'
# $ find graphblas/ -name __init__.py -print | sort | sed -e 's/\/__init__.py//g' -e 's/\//./g'
# $ python -c 'import tomli ; [print(x) for x in sorted(tomli.load(open("pyproject.toml", "rb"))["tool"]["setuptools"]["packages"])]'
packages = [
    "graphblas",
    "graphblas.agg",
    "graphblas.binary",
    "graphblas.core",
    "graphblas.core.ss",
    "graphblas.indexunary",
    "graphblas.monoid",
    "graphblas.op",
    "graphblas.semiring",
    "graphblas.select",
    "graphblas.ss",
    "graphblas.tests",
    "graphblas.unary",
]

[tool.setuptools-git-versioning]
enabled = true
dev_template = "{tag}+{ccount}.g{sha}"
dirty_template = "{tag}+{ccount}.g{sha}.dirty"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
profile = "black"
skip_gitignore = true
float_to_top = true
default_section = "THIRDPARTY"
known_first_party = "graphblas"
line_length = 100

[tool.pytest.ini_options]
testpaths = "graphblas/tests"
xfail_strict = true
markers = [
    "slow: Skipped unless --runslow passed",
]
filterwarnings = [
    # See: https://docs.python.org/3/library/warnings.html#describing-warning-filters
    # and: https://docs.pytest.org/en/7.2.x/how-to/capture-warnings.html#controlling-warnings
    "error",
    "ignore:`np.bool` is a deprecated alias:DeprecationWarning:sparse._umath",  # sparse <0.13
]

[tool.coverage.run]
branch = true
source = ["graphblas"]
omit = [
    "graphblas/_version.py",
    "graphblas/viz.py",  # TODO: test and get coverage for viz.py
]

[tool.coverage.report]
ignore_errors = false
precision = 1
fail_under = 0
skip_covered = true
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.codespell]
ignore-words-list = "coo,ba"

[tool.ruff]
# https://github.com/charliermarsh/ruff/
line-length = 100
target-version = "py38"
select = [
    # Have we enabled too many checks that they'll become a nuisance? We'll see...
    "F",  # pyflakes
    "E",  # pycodestyle Error
    "W",  # pycodestyle Warning
    # "C90",  # mccabe
    # "I",  # isort
    "D",  # pydocstyle
    "UP",  # pyupgrade
    # "N",  # pep8-naming
    "YTT",  # flake8-2020
    # "ANN",  # flake8-annotations
    "S",  # bandit
    # "BLE",  # flake8-blind-except
    # "FBT",  # flake8-boolean-trap
    "B",  # flake8-bugbear
    # "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "T10",  # flake8-debugger
    # "EM",  # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    # "ICN",  # flake8-import-conventions
    "T20",   # flake8-print
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    # "RET",  # flake8-return
    "SIM",  # flake8-simplify
    # "TID",  # flake8-tidy-imports
    # "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    # "ERA",  # eradicate
    # "PD",  # pandas-vet
    "PGH",  # pygrep-hooks
    "PLC",  # pylint Convention
    "PLE",  # pylint Error
    "PLR",  # pylint Refactor
    "PLW",  # pylint Warning
    "PIE",  # flake8-pie
    "COM",  # flake8-commas
    # "INP",  # flake8-no-pep420
    "EXE",  # flake8-executable
    "TYP",  # flake8-type-checking
    "TRY",  # tryceratops
    # "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
]
external = [
    # noqa codes that ruff doesn't know about: https://github.com/charliermarsh/ruff#external
]
ignore = [
    # Would be nice to fix these
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "D205",  # 1 blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line
    "D213",  # Multi-line docstring summary should start at the second line
    "D401",  # First line of docstring should be in imperative mood:
    "D417",  # Missing argument description in the docstring:

    # Maybe consider
    "TRY004",  # Prefer `TypeError` exception for invalid type (Note: good advice, but not worth the nuisance)
    "TRY200",  # Use `raise from` to specify exception cause (Note: sometimes okay to raise original exception)

    # Intentionally ignored
    "D203",  # 1 blank line required before class docstring (Note: conflicts with D211, which is preferred)
    "SIM102",  # Use a single `if` statement instead of nested `if` statements (Note: often necessary)
    "SIM105",  # Use contextlib.suppress(...) instead of try-except-pass (Note: try-except-pass is much faster)
    "SIM108",  # Use ternary operator ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    # "SIM401",  # Use dict.get ... instead of if-else-block (Note: if-else better for coverage and sometimes clearer)
    "PLR2004",  # Magic number used in comparison, consider replacing magic with a constant variable
    "COM812",  # Trailing comma missing
    "PT001",  # Use `@pytest.fixture()` over `@pytest.fixture` (Note: why?)
    "PT003",  # `scope='function'` is implied in `@pytest.fixture()` (Note: no harm in being explicit)
    "PT023",  # Use `@pytest.mark.slow()` over `@pytest.mark.slow` (Note: why?)
]
[tool.ruff.per-file-ignores]
"graphblas/core/operator.py" = ["S102"]
"graphblas/tests/*py" = ["S101", "T201", "D103", "D100"]
"graphblas/tests/test_dtype.py" = ["UP003"]
"graphblas/tests/test_formatting.py" = ["E501"]
"graphblas/**/__init__.py" = ["F401"]
"scripts/create_pickle.py" = ["F403", "F405"]

[tool.pylint.messages_control]
# To run a single check, do: pylint graphblas --disable E,W,R,C,I --enable assignment-from-no-return
max-line-length = 100
py-version = "3.8"
enable = ["I"]
disable = [
    # Error
    "assignment-from-no-return",

    # Warning
    "arguments-differ",
    "arguments-out-of-order",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "non-parent-init-called",
    "redefined-builtin",
    "redefined-outer-name",
    "super-init-not-called",
    "unbalanced-tuple-unpacking",
    "unnecessary-lambda",
    "unspecified-encoding",
    "unused-argument",
    "unused-variable",

    # Refactor
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "too-few-public-methods",

    # Convention
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-many-lines",

    # Intentionally turned off
    # error
    "class-variable-slots-conflict",
    "invalid-unary-operand-type",
    "no-member",
    "no-name-in-module",
    "not-an-iterable",
    "too-many-function-args",
    "unexpected-keyword-arg",
    # warning
    "broad-except",
    "pointless-statement",
    "protected-access",
    "undefined-loop-variable",
    "unused-import",
    # refactor
    "comparison-with-itself",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    # convention
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "singleton-comparison",
    "single-string-used-for-slots",
    "unidiomatic-typecheck",
    "unnecessary-dunder-call",
    "wrong-import-order",
    "wrong-import-position",
    # informative
    "locally-disabled",
    "suppressed-message",
]
