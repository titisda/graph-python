name: Tests

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ${{ matrix.cfg.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          # Begin with fast, vanilla test
          - { pyver: "3.10", os: "ubuntu-latest", testopts: "", sourcetype: "conda-forge" }
          # Test ubuntu with conda-forge
          - { pyver: "3.8", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.9", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.10", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          # Test macos with conda-forge
          - { pyver: "3.8", os: "macos-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.9", os: "macos-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.10", os: "macos-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          # Test windows with conda-forge
          - { pyver: "3.8", os: "windows-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.9", os: "windows-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          - { pyver: "3.10", os: "windows-latest", testopts: "--randomly", sourcetype: "conda-forge" }
          # Test ubuntu with alternative methods to install dependencies
          - { pyver: "3.10", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "wheel" }
          - { pyver: "3.10", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "source" }
          - { pyver: "3.10", os: "ubuntu-latest", testopts: "--randomly", sourcetype: "upstream" }
          # Test misc
          - { pyver: "3.8", os: "macos-latest", testopts: "--randomly", sourcetype: "upstream" }
          - { pyver: "3.9", os: "windows-latest", testopts: "--randomly", sourcetype: "upstream" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ matrix.cfg.pyver }}
          channels: conda-forge,nodefaults
          channel-priority: strict
          activate-environment: graphblas
          auto-activate-base: false
      - name: Update env
        run: |
          mamba install pytest coverage coveralls=3.3.1 pytest-randomly black \
            pandas numba scipy networkx cffi donfig pyyaml awkward
      - name: Build extension module
        run: |
          if [[ ${{ matrix.cfg.sourcetype }} == "wheel" ]]; then
              pip install suitesparse-graphblas
          else
              mamba install "graphblas>=7.4.0"
          fi
          if [[ ${{ matrix.cfg.sourcetype }} == "source" ]]; then
              pip install --no-binary=all suitesparse-graphblas
          elif [[ ${{ matrix.cfg.sourcetype }} == "upstream" ]]; then
              mamba install cython
              pip install --no-deps git+https://github.com/GraphBLAS/python-suitesparse-graphblas.git@main#egg=suitesparse-graphblas
          elif [[ ${{ matrix.cfg.sourcetype }} == "conda-forge" ]]; then
              mamba install python-suitesparse-graphblas
          fi
          pip install --no-deps -e .
      - name: Unit tests
        run: |
          coverage run --branch -m pytest ${{ matrix.cfg.testopts }} -v
          # Run tests again with Scalars being C scalars by default
          find graphblas -type f -name "*.py" -print0 | xargs -0 sed -i -s \
            -e '/# pragma: is_grbscalar/! s/is_cscalar=False/is_cscalar=True/g' \
            -e '/# pragma: is_grbscalar/! s/is_cscalar = False/is_cscalar = True/g' \
            -e '/# pragma: to_grb/ s/is_cscalar=True/is_cscalar=False/g' \
            -e '/# pragma: to_grb/ s/is_cscalar = True/is_cscalar = False/g'
          coverage run -a --branch -m pytest ${{ matrix.cfg.testopts }} -v
          git checkout .  # Undo changes to scalar default

          # Test (and cover) automatic initialization
          coverage run -a --branch graphblas/tests/test_auto_init.py
          coverage run -a --branch graphblas/tests/test_external_init.py
          # Test (and cover) lazy module loader
          echo "from graphblas.agg import count" > script.py
          coverage run -a --branch script.py
          echo "from graphblas import agg" > script.py  # Does this still cover?
          echo "from graphblas.core import agg" >> script.py
          coverage run -a --branch script.py
          # Tests lazy loading of lib, ffi, and NULL in gb.core
          echo "from graphblas.core import base" > script.py
          coverage run -a --branch script.py
          rm script.py
      - name: Auto-generated code check
        run: |
          coverage run -a --branch -m graphblas.core.automethods
          coverage run -a --branch -m graphblas.core.infixmethods
          git diff --exit-code
          coverage xml
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.cfg.pyver}}/${{ matrix.cfg.testopts }}
          COVERALLS_PARALLEL: true
        run: |
          coverage report --show-missing
          coveralls --service=github
      - name: codecov
        uses: codecov/codecov-action@v3
      # Randomly test notebooks 1/3 of the time
      - name: random number
        uses: ddradar/choose-random-action@v2.0.2
        id: rand
        with:
          contents: |
            true
            false
          weights: |
            1
            2
      - name: Notebooks Execution check
        if: ${{ steps.rand.outputs.selected == 'true' }}
        run: |
          mamba install matplotlib nbconvert jupyter 'ipython>=7'
          jupyter nbconvert --to notebook --execute notebooks/*ipynb

  finish:
    needs: build_and_test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip
      - run: pip install coveralls
      - name: Coveralls Finished
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --finish
