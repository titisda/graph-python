name: Tests

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    # runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        pyver: ["3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        testopts:
          - "-vv --blocking"
          - "-vv --non-blocking --record --runslow"
        sourcetype:
          - "wheel"
          - "source"
          - "upstream"
          - "conda-forge"
        exclude:
          - sourcetype: "upstream"
            testopts: "--non-blocking --record --runslow"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.pyver }}
          channels: conda-forge
          activate-environment: grblas
      - name: Update env
        run: |
          conda install -c conda-forge pytest-runner coverage 'black>=20.8b1' flake8 coveralls
      - name: Style Checks
        run: |
          flake8
          black . --check --diff
      - name: Build extension module
        run: |
          conda install -c conda-forge pandas numba scipy networkx cffi donfig pyyaml
          if [[ ${{ matrix.sourcetype }} == "wheel" ]]; then
              pip install suitesparse-graphblas
          else
              conda install -c conda-forge "graphblas>=6"
          fi
          if [[ ${{ matrix.sourcetype }} == "source" ]]; then
              pip install --no-binary=all suitesparse-graphblas
          elif [[ ${{ matrix.sourcetype }} == "upstream" ]]; then
              # I can't get pip install from git to work, so git clone instead.
              # pip install git+https://github.com/GraphBLAS/python-suitesparse-graphblas.git@main#egg=suitesparse-graphblas
              conda install -c conda-forge cython
              git clone --depth=1 https://github.com/GraphBLAS/python-suitesparse-graphblas.git ssgb
              pushd ssgb
              python setup.py install
              popd
          elif [[ ${{ matrix.sourcetype }} == "conda-forge" ]]; then
              conda install -c conda-forge python-suitesparse-graphblas
          fi
          python setup.py develop --no-deps
      # - name: Optional pygraphblas
      #   if: contains(matrix.testopts, 'pygraphblas') && (matrix.pyver != 3.9)
      #   run: |
      #     source "$CONDA/etc/profile.d/conda.sh"
      #     conda activate grblas
      #     conda install -c conda-forge pygraphblas
      - name: Verify build
        run: |
          # Make sure `from grblas import *` works as expected
          python -c "from grblas import * ; Matrix"
          # Make sure all top-level imports work
          ( for attr in Matrix Scalar Vector Recorder _agg agg backends base binary descriptor dtypes exceptions expr ffi formatting infix init io lib mask matrix monoid op operator scalar semiring tests unary vector recorder _ss ss ; do echo python -c \"from grblas import $attr\" ; if ! python -c "from grblas import $attr" ; then exit 1 ; fi ; done )
          ( for attr in _agg agg backends base binary descriptor dtypes exceptions expr formatting infix io mask matrix monoid op operator scalar semiring tests unary vector recorder _ss ss ; do echo python -c \"import grblas.$attr\" ; if ! python -c "import grblas.$attr" ; then exit 1 ; fi ; done )
      - name: Unit tests
        # if: (! contains(matrix.testopts, 'pygraphblas')) || (matrix.pyver != 3.9)
        run: |
          if [[ ${{ matrix.pyver }} == "3.8" && "${{ matrix.testopts }}" == "--blocking" ]] ; then
              # segfault if we run coverage, so don't run coverage ;)
              echo "skipping coverage"
              pytest ${{ matrix.testopts }}
              # Run tests again with Scalars being C scalars by default
              find grblas -type f -name "*.py" -print0 | xargs -0 sed -i -s \
                -e '/# pragma: is_grbscalar/! s/is_cscalar=False/is_cscalar=True/g' \
                -e '/# pragma: is_grbscalar/! s/is_cscalar = False/is_cscalar = True/g' \
                -e '/# pragma: to_grb/ s/is_cscalar=True/is_cscalar=False/g' \
                -e '/# pragma: to_grb/ s/is_cscalar = True/is_cscalar = False/g'
              pytest ${{ matrix.testopts }}
          else
              coverage run --branch -m pytest ${{ matrix.testopts }}
              # Run tests again with Scalars being C scalars by default
              find grblas -type f -name "*.py" -print0 | xargs -0 sed -i -s \
                -e '/# pragma: is_grbscalar/! s/is_cscalar=False/is_cscalar=True/g' \
                -e '/# pragma: is_grbscalar/! s/is_cscalar = False/is_cscalar = True/g' \
                -e '/# pragma: to_grb/ s/is_cscalar=True/is_cscalar=False/g' \
                -e '/# pragma: to_grb/ s/is_cscalar = True/is_cscalar = False/g'
              coverage run -a --branch -m pytest ${{ matrix.testopts }}
          fi
          git checkout .  # Undo changes to scalar default

          # Test (and cover) automatic initialization
          coverage run -a --branch grblas/tests/test_auto_init.py
          coverage run -a --branch grblas/tests/test_external_init.py
      - name: Auto-generated code check
        run: |
          coverage run -a --branch -m grblas._automethods
          coverage run -a --branch -m grblas._infixmethods
          git diff --exit-code
      - name: Coverage
        # if: (! contains(matrix.testopts, 'pygraphblas')) || (matrix.pyver != 3.9)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.pyver}}/${{ matrix.testopts }}
          COVERALLS_PARALLEL: true
        run: |
          coverage report --show-missing
          coveralls --service=github
      - name: Notebooks Execution check
        # if: (! contains(matrix.testopts, 'pygraphblas')) || (matrix.pyver != 3.9)
        run: |
          conda install -c conda-forge matplotlib nbconvert jupyter 'ipython>=7'
          jupyter nbconvert --to notebook --execute notebooks/*ipynb

  finish:
    needs: build_and_test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Setup conda env
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda create -n coveralls_final -c conda-forge python=3.9 coveralls
      - name: Coveralls Finished
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate coveralls_final
          coveralls --finish
