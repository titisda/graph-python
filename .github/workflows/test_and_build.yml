# There are three things in this file that need regular maintenance:
#
# 1) Updating GraphBLAS version
#   - We should probably make this a variable to make it easier to change
# 2) Updating dependency versions in "Update env"
#   - This typically means adding new major versions of packages
#   - `scripts/check_versions.sh` may be helpful to get version info
# 3) Updating Python versions (search for "Python version" or "pyver")

name: Tests

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main
  push:
    branches:
      - main

jobs:
  rngs:
    # To achieve consistent coverage, we need a little bit of correlated collaboration.
    # Specifically, we need to make sure we run with and without `--mapnumpy` on slow tests.
    # We also use correlated RNG to run both backends on slow tests.
    #
    # {A,B,C,D},yes = --mapnumpy
    # {A,B,C,D},no = --no-mapnumpy
    # {D,E,F,G},yes = --backend=suitesparse
    # {D,E,F,G},no = --backend=suitesparse-vanilla
    #
    #                   linux   windows osx
    #               +-----------------------+
    # A  E  normal  |   yes     no          |
    # A  E  bizarro |   no      yes         |
    # B  F  normal  |           no      yes |
    # B  F  bizarro |           yes     no  |
    # C  G  normal  |   no      yes         |
    # C  G  bizarro |   yes     no          |
    # D  H  normal  |           yes     no  |
    # D  H  bizarro |           no      yes |
    #               +-----------------------+
    runs-on: ubuntu-latest
    outputs:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
      mapnumpy: ${{ steps.mapnumpy.outputs.selected }}
      backend: ${{ steps.backend.outputs.selected }}
    steps:
      - name: RNG for mapnumpy
        uses: ddradar/choose-random-action@v2.0.2
        id: mapnumpy
        with:
          contents: |
            A
            B
            C
            D
          weights: |
            1
            1
            1
            1
      - name: RNG for backend
        uses: ddradar/choose-random-action@v2.0.2
        id: backend
        with:
          contents: |
            E
            F
            G
            H
          weights: |
            1
            1
            1
            1
  build_and_test:
    needs: rngs
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      # To "stress test" in CI, set `fail-fast` to `false` and perhaps add more items to `matrix.slowtask`
      fail-fast: true
      # The build matrix is [os]x[slowtask] and then randomly chooses [pyver] and [sourcetype].
      # This should ensure we'll have full code coverage (i.e., no chance of getting unlucky),
      # since we need to run all slow tests on Windows and non-Windoes OSes.
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        slowtask: ["pytest_normal", "pytest_bizarro", "notebooks"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: RNG for Python version
        uses: ddradar/choose-random-action@v2.0.2
        id: pyver
        with:
          # We should support major Python versions for at least 36-42 months
          contents: |
            3.8
            3.9
            3.10
          weights: |
            1
            1
            1
      - name: RNG for source of python-suitesparse-graphblas
        uses: ddradar/choose-random-action@v2.0.2
        id: sourcetype
        with:
          # Set weight to 0 to skip (such as if 'upstream' is known to not work).
          # Have slightly higher weight for `conda-forge` for faster CI.
          contents: |
            conda-forge
            wheel
            source
            upstream
          weights: |
            2
            1
            1
            1
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          python-version: ${{ steps.pyver.outputs.selected }}
          channels: conda-forge,nodefaults
          channel-priority: strict
          activate-environment: graphblas
          auto-activate-base: false
      - name: Update env
        run: |
          # Install dependencies based on the needs of the job.
          # Don't panic! This may look scary at a glance, but each line makes sense.
          #
          # First let's randomly get versions of dependencies to install.
          # Consider removing old versions when they become problematic or very old (>=2 years).
          nxver=$(python -c 'import random ; print(random.choice(["=2.7", "=2.8", "=3.0", ""]))')
          yamlver=$(python -c 'import random ; print(random.choice(["=5.4", "=6.0", ""]))')
          sparsever=$(python -c 'import random ; print(random.choice(["=0.12", "=0.13", "=0.14", ""]))')
          if [[ ${{ steps.pyver.outputs.selected }} == "3.8" ]]; then
            npver=$(python -c 'import random ; print(random.choice(["=1.21", "=1.22", "=1.23", ""]))')
            spver=$(python -c 'import random ; print(random.choice(["=1.8", "=1.9", "=1.10", ""]))')
            pdver=$(python -c 'import random ; print(random.choice(["=1.2", "=1.3", "=1.4", "=1.5", ""]))')
            akver=$(python -c 'import random ; print(random.choice(["=1.9", "=1.10", "=2.0", ""]))')
          elif [[ ${{ steps.pyver.outputs.selected }} == "3.9" ]]; then
            npver=$(python -c 'import random ; print(random.choice(["=1.21", "=1.22", "=1.23", ""]))')
            spver=$(python -c 'import random ; print(random.choice(["=1.8", "=1.9", "=1.10", ""]))')
            pdver=$(python -c 'import random ; print(random.choice(["=1.2", "=1.3", "=1.4", "=1.5", ""]))')
            akver=$(python -c 'import random ; print(random.choice(["=1.9", "=1.10", "=2.0", ""]))')
          elif [[ ${{ steps.pyver.outputs.selected }} == "3.10" ]]; then
            npver=$(python -c 'import random ; print(random.choice(["=1.21", "=1.22", "=1.23", ""]))')
            spver=$(python -c 'import random ; print(random.choice(["=1.8", "=1.9", "=1.10", ""]))')
            pdver=$(python -c 'import random ; print(random.choice(["=1.3", "=1.4", "=1.5", ""]))')
            akver=$(python -c 'import random ; print(random.choice(["=1.9", "=1.10", "=2.0", ""]))')
          else  # Python 3.11
            npver=$(python -c 'import random ; print(random.choice(["=1.23", ""]))')
            spver=$(python -c 'import random ; print(random.choice(["=1.9", "=1.10", ""]))')
            pdver=$(python -c 'import random ; print(random.choice(["=1.5", ""]))')
            akver=$(python -c 'import random ; print(random.choice(["=1.10", "=2.0.5", "=2.0.6", "=2.0.7", "=2.0.8", ""]))')
          fi
          if [[ ${{ steps.sourcetype.outputs.selected }} == "source" || ${{ steps.sourcetype.outputs.selected }} == "upstream" ]]; then
            # TODO: there are currently issues with some numpy versions when
            # installing python-suitesparse-grphblas from source or upstream.
            npver=""
            spver=""
            pdver=""
          fi
          # We can have a tight coupling with python-suitesparse-graphblas.
          # That is, we don't need to support versions of it that are two years old.
          # But, it's still useful for us to test with different versions!
          if [[ ${{ steps.sourcetype.outputs.selected}} == "conda-forge" ]] ; then
            psgver=$(python -c 'import random ; print(random.choice(["=7.4.0", "=7.4.1", "=7.4.2", "=7.4.3.0", "=7.4.3.1", ""]))')
          else
            psgver=""
          fi
          if [[ $npver == "=1.21" ]] ; then
            numbaver=$(python -c 'import random ; print(random.choice(["=0.55", "=0.56", ""]))')
          else
            numbaver=$(python -c 'import random ; print(random.choice(["=0.56", ""]))')
          fi
          echo "versions: np${npver} sp${spver} pd${pdver} ak${akver} nx${nxver} numba${numbaver} yaml${yamlver} sparse${sparsever} psgver${psgver}"

          # Once we have wheels for all OSes, we can delete the last two lines.
          mamba install packaging pytest coverage coveralls=3.3.1 pytest-randomly cffi donfig pyyaml${yamlver} sparse${sparsever} \
            pandas${pdver} scipy${spver} numpy${npver} awkward${akver} networkx${nxver} numba${numbaver} \
            ${{ matrix.slowtask == 'pytest_bizarro' && 'black' || '' }} \
            ${{ matrix.slowtask == 'notebooks' && 'matplotlib nbconvert jupyter "ipython>=7"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'upstream' && 'cython' || '' }} \
            ${{ steps.sourcetype.outputs.selected != 'wheel' && '"graphblas>=7.4.0"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'conda-forge' && 'python-suitesparse-graphblas' || '' }}${psgver} \
            ${{ matrix.os != 'ubuntu-latest' && '"graphblas>=7.4.0"' || '' }} \
            ${{ steps.sourcetype.outputs.selected == 'wheel' && matrix.os != 'ubuntu-latest' && 'python-suitesparse-graphblas' || '' }}
      - name: Build extension module
        run: |
          # We only have wheels for Linux right now
          if [[ ${{ steps.sourcetype.outputs.selected }} == "wheel" && ${{ matrix.os }} == "ubuntu-latest" ]]; then
              pip install --no-deps suitesparse-graphblas
          elif [[ ${{ steps.sourcetype.outputs.selected }} == "source" ]]; then
              pip install --no-deps --no-binary=all suitesparse-graphblas
          elif [[ ${{ steps.sourcetype.outputs.selected }} == "upstream" ]]; then
              pip install --no-deps git+https://github.com/GraphBLAS/python-suitesparse-graphblas.git@main#egg=suitesparse-graphblas
          fi
          pip install --no-deps -e .
      - name: Unit tests
        run: |
          A=${{ needs.rngs.outputs.mapnumpy == 'A' || '' }} ; B=${{ needs.rngs.outputs.mapnumpy == 'B' || '' }}
          C=${{ needs.rngs.outputs.mapnumpy == 'C' || '' }} ; D=${{ needs.rngs.outputs.mapnumpy == 'D' || '' }}
          E=${{ needs.rngs.outputs.backend == 'E' || '' }} ; F=${{ needs.rngs.outputs.backend == 'F' || '' }}
          G=${{ needs.rngs.outputs.backend == 'G' || '' }} ; H=${{ needs.rngs.outputs.backend == 'H' || '' }}
          normal=${{ matrix.slowtask == 'pytest_normal' || '' }} ; bizarro=${{ matrix.slowtask == 'pytest_bizarro' || '' }}
          ubuntu=${{ matrix.os == 'ubuntu-latest' || '' }} ; windows=${{ matrix.os == 'windows-latest' || '' }} ; macos=${{ matrix.os == 'macos-latest' || '' }}
          mapnumpy='--mapnumpy' ; nomapnumpy='--no-mapnumpy' ; suitesparse='--backend=suitesparse' ; vanilla='--backend=suitesparse-vanilla'
          args=$(
            if [[ $A && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $A && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $B && $normal  ]] ; then if [[ $macos  ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $B && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $C && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $C && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $D && $normal  ]] ; then if [[ $macos  ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $D && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $E && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $E && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $F && $normal  ]] ; then if [[ $macos  ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $F && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $G && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $G && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $H && $normal  ]] ; then if [[ $macos  ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $H && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)
          echo $args
          coverage run -m pytest --color=yes --randomly -v $args \
            ${{ matrix.slowtask == 'pytest_normal' && '--runslow' || '' }}
      - name: Unit tests (bizarro scalars)
        run: |
          # Run tests again with Scalars being C scalars by default
          find graphblas -type f -name "*.py" -print0 | xargs -0 sed -i -s \
            -e '/# pragma: is_grbscalar/! s/is_cscalar=False/is_cscalar=True/g' \
            -e '/# pragma: is_grbscalar/! s/is_cscalar = False/is_cscalar = True/g' \
            -e '/# pragma: to_grb/ s/is_cscalar=True/is_cscalar=False/g' \
            -e '/# pragma: to_grb/ s/is_cscalar = True/is_cscalar = False/g'
          A=${{ needs.rngs.outputs.mapnumpy == 'A' || '' }} ; B=${{ needs.rngs.outputs.mapnumpy == 'B' || '' }}
          C=${{ needs.rngs.outputs.mapnumpy == 'C' || '' }} ; D=${{ needs.rngs.outputs.mapnumpy == 'D' || '' }}
          E=${{ needs.rngs.outputs.backend == 'E' || '' }} ; F=${{ needs.rngs.outputs.backend == 'F' || '' }}
          G=${{ needs.rngs.outputs.backend == 'G' || '' }} ; H=${{ needs.rngs.outputs.backend == 'H' || '' }}
          normal=${{ matrix.slowtask == 'pytest_normal' || '' }} ; bizarro=${{ matrix.slowtask == 'pytest_bizarro' || '' }}
          ubuntu=${{ matrix.os == 'ubuntu-latest' || '' }} ; windows=${{ matrix.os == 'windows-latest' || '' }} ; macos=${{ matrix.os == 'macos-latest' || '' }}
          mapnumpy='--mapnumpy' ; nomapnumpy='--no-mapnumpy' ; suitesparse='--backend=suitesparse' ; vanilla='--backend=suitesparse-vanilla'
          args=$(
            if [[ $A && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $A && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $B && $normal  ]] ; then if [[ $macos  ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $B && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $C && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $C && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $D && $normal  ]] ; then if [[ $macos  ]] ; then echo " $mapnumpy"    ; elif [[ $windows ]] ; then echo " $nomapnumpy"  ; fi ; fi)$( \
            if [[ $D && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $nomapnumpy"  ; elif [[ $windows ]] ; then echo " $mapnumpy"    ; fi ; fi)$( \
            if [[ $E && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $E && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $F && $normal  ]] ; then if [[ $macos  ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $F && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $G && $normal  ]] ; then if [[ $ubuntu ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $G && $bizarro ]] ; then if [[ $ubuntu ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)$( \
            if [[ $H && $normal  ]] ; then if [[ $macos  ]] ; then echo " $suitesparse" ; elif [[ $windows ]] ; then echo " $vanilla"     ; fi ; fi)$( \
            if [[ $H && $bizarro ]] ; then if [[ $macos  ]] ; then echo " $vanilla"     ; elif [[ $windows ]] ; then echo " $suitesparse" ; fi ; fi)
          echo $args
          coverage run -a -m pytest --color=yes --randomly -v $args \
            ${{ matrix.slowtask == 'pytest_bizarro' && '--runslow' || '' }}
          git checkout .  # Undo changes to scalar default
      - name: Miscellaneous tests
        if: matrix.slowtask == 'pytest_normal'
        run: |
          # Test (and cover) automatic initialization
          coverage run -a graphblas/tests/test_auto_init.py
          coverage run -a graphblas/tests/test_external_init.py
          # Test (and cover) lazy module loader
          echo "from graphblas.agg import count" > script.py
          coverage run -a script.py
          echo "from graphblas import agg" > script.py  # Does this still cover?
          echo "from graphblas.core import agg" >> script.py
          coverage run -a script.py
          # Tests lazy loading of lib, ffi, and NULL in gb.core
          echo "from graphblas.core import base" > script.py
          coverage run -a script.py
          rm script.py
          # Tests whose coverage depend on order of tests :/
          # TODO: understand why these are order-dependent and try to fix
          coverage run -a -m pytest --color=yes -x --no-mapnumpy --runslow -k test_binaryop_attributes_numpy graphblas/tests/test_op.py
          # coverage run -a -m pytest --color=yes -x --no-mapnumpy -k test_npmonoid graphblas/tests/test_numpyops.py --runslow
      - name: Auto-generated code check
        if: matrix.slowtask == 'pytest_bizarro'
        run: |
          # This step uses `black`
          coverage run -a -m graphblas.core.automethods
          coverage run -a -m graphblas.core.infixmethods
          git diff --exit-code
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.os }}/${{ matrix.slowtask }}
          COVERALLS_PARALLEL: true
        run: |
          coverage xml
          coverage report --show-missing
          coveralls --service=github
      - name: codecov
        uses: codecov/codecov-action@v3
      - name: Notebooks Execution check
        if: matrix.slowtask == 'notebooks'
        run: jupyter nbconvert --to notebook --execute notebooks/*ipynb

  finish:
    needs: build_and_test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip
      - run: pip install coveralls
      - name: Coveralls Finished
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --finish
